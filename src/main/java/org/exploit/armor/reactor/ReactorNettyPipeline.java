package org.exploit.armor.reactor;

import io.netty.channel.Channel;
import org.exploit.armor.constant.ChannelScope;
import org.exploit.armor.mitigation.MitigationHandler;
import org.exploit.armor.provider.NettyServerPipeline;
import reactor.netty.http.server.HttpServer;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Supplier;

/**
 * NetArmorConfigurer
 * Configures the NetArmor pipeline.
 */
public class ReactorNettyPipeline implements NettyServerPipeline<HttpServer> {
    private final ReactorNettyProvider server;

    private final List<Supplier<MitigationHandler>> mitigationHandlers = new ArrayList<>();

    // Context handlers holder.
    private final Map<String, List<MitigationHandler>> contextHandlers = new ConcurrentHashMap<>();

    public ReactorNettyPipeline(ReactorNettyProvider server) {
        this.server = server;
    }

    @Override
    public void addMitigationHandler(Supplier<MitigationHandler> mitigationHandler) {
        mitigationHandlers.add(mitigationHandler);
    }

    @Override
    public HttpServer configure(HttpServer bootstrap) {
        return bootstrap.doOnChannelInit((observer, channel, remote) -> initChannel(channel))
                .doOnConnection(con -> initConnection(con.channel()));
    }

    private void initChannel(Channel ch) {
        var id = ch.id().asShortText();
        var handlers = computeHandlers(id);
        removeOnClose(ch, id);

        for (var handler : handlers)
            handler.apply(ChannelScope.INIT, server, ch.pipeline());
    }

    private void initConnection(Channel ch) {
        // Extracting id. For HTTP/1.1 it is the same as channel id
        // but for HTTP/2 it contains stream id.
        var id = extractId(ch.id().asShortText());
        var handlers = contextHandlers.remove(id);

        if (handlers != null)
            for (var handler : handlers)
                handler.apply(ChannelScope.CONNECTION, server, ch.pipeline());
    }

    private List<MitigationHandler> computeHandlers(String id) {
        return contextHandlers.computeIfAbsent(id, k -> mitigationHandlers.stream()
                .map(Supplier::get)
                .toList());
    }

    private String extractId(String id) {
        return id.split("/")[0];
    }

    // Remove context handlers on channel close.
    private void removeOnClose(Channel ch, String id) {
        ch.closeFuture().addListener(future -> contextHandlers.remove(id));
    }
}
