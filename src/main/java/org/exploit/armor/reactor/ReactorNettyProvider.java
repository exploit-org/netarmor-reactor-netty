package org.exploit.armor.reactor;

import io.netty.channel.ChannelHandler;
import io.netty.channel.ChannelPipeline;
import io.netty.handler.codec.http.HttpObjectAggregator;
import org.exploit.armor.provider.NettyServerPipeline;
import org.exploit.armor.provider.NettyServerProvider;
import reactor.netty.NettyPipeline;
import reactor.netty.http.server.HttpServer;

/**
 * ReactorNettyServer
 * Implements NettyServer Pipeline for Reactor Netty
 */
public class ReactorNettyProvider implements NettyServerProvider<HttpServer> {
    /**
     * Adds a ChannelHandler to the first position of the ChannelPipeline.
     * Intended to be used for adding ChannelHandlers in doOnChannelInit.
     * <p>
     * @param pipeline - ChannelPipeline
     * @param name - Name of the ChannelHandler
     * @param handler - ChannelHandler
     */
    @Override
    public void addFirst(ChannelPipeline pipeline, String name, ChannelHandler handler) {
        pipeline.addFirst(name, handler);
    }

    /**
     * Adds a ChannelHandler before the Http1 Request Handler or the Http2 Handler.
     * At this stage, the HttpContent is not yet decoded.
     * <p>
     * Intended to be used in doOnChannelInit.
     * @param pipeline - ChannelPipeline
     * @param name - Name of the ChannelHandler
     * @param handler - ChannelHandler
     */
    @Override
    public void addBeforeHttpRequestHandler(ChannelPipeline pipeline, String name, ChannelHandler handler) {
        if (pipeline.get(NettyPipeline.H2MultiplexHandler) != null)
            addBeforeHttp2Handler(pipeline, name, handler);
        else
            addBeforeHttp1RequestHandler(pipeline, name, handler);
    }

    /**
     * Adds a ChannelHandler before the Http1 Request Handler.
     * At this stage, the HttpContent is not yet decoded.
     * <p>
     * Intended to be used in doOnChannelInit.
     * @param pipeline - ChannelPipeline
     * @param name - Name of the ChannelHandler
     * @param handler - ChannelHandler
     */
    @Override
    public void addBeforeHttp1RequestHandler(ChannelPipeline pipeline, String name, ChannelHandler handler) {
        if (pipeline.get(name) != null)
            return;

        if (pipeline.get(NettyPipeline.HttpTrafficHandler) != null)
            pipeline.addBefore(NettyPipeline.HttpTrafficHandler, name, handler);
    }

    /**
     * Adds a ChannelHandler before the Http2 Handler.
     * At this stage, HTTP/2 frames can be intercepted.
     * <p>
     * Intended to be used in doOnChannelInit
     * @param pipeline - ChannelPipeline
     * @param name - Name of the ChannelHandler
     * @param handler - ChannelHandler
     */
    @Override
    public void addBeforeHttp2Handler(ChannelPipeline pipeline, String name, ChannelHandler handler) {
        if (pipeline.get(name) != null)
            return;

        var http2Handler = pipeline.get(NettyPipeline.H2MultiplexHandler);

        if (http2Handler != null)
            pipeline.addBefore(NettyPipeline.H2MultiplexHandler, name, handler);
    }

    /**
     * Adds a ChannelHandler before the SslHandler.
     * At this stage, raw TLS packets can be intercepted (e.g. ClientHello).
     * <p>
     * Intended to be used in doOnChannelInit
     * @param pipeline - ChannelPipeline
     * @param name - Name of the ChannelHandler
     * @param handler - ChannelHandler
     */
    @Override
    public void addBeforeSslHandler(ChannelPipeline pipeline, String name, ChannelHandler handler) {
        if (pipeline.get(name) != null)
            return;

        var sslHandler = pipeline.get(NettyPipeline.SslHandler);

        if (sslHandler != null)
            pipeline.addBefore(NettyPipeline.SslHandler, name, handler);
    }

    /**
     * Adds a ChannelHandler before the HttpTrafficHandler.
     * At this stage, HTTP requests can be intercepted.
     * Note, that the HttpRequests provided are already full (content included).
     * <p>
     * If you need to handle them before the content is decoded, use addBeforeHttp1RequestHandler
     * or addBeforeHttp2Handler.
     * <p>
     * Intended to be used in doOnConnection
     * @param pipeline - ChannelPipeline
     * @param name - Name of the ChannelHandler
     * @param handler - ChannelHandler
     */
    @Override
    public void addAfterHttpTrafficHandler(ChannelPipeline pipeline, String name, ChannelHandler handler) {
        if (pipeline.get(name) != null)
            return;

        var httpTrafficHandler = pipeline.get(NettyPipeline.HttpTrafficHandler);

        // If HttpAggregator is not present, add it.
        // It is required to properly handle HTTP/1.1 requests.

        if (httpTrafficHandler != null)
            pipeline.addAfter(NettyPipeline.HttpTrafficHandler, name, handler);

        var aggregator = pipeline.get(NettyPipeline.HttpAggregator);
        var isHttp2 = pipeline.get(NettyPipeline.H2ToHttp11Codec) != null;

        if (aggregator == null && !isHttp2)
            pipeline.addAfter(NettyPipeline.HttpTrafficHandler, NettyPipeline.HttpAggregator,
                    new HttpObjectAggregator(65536));
    }

    /**
     * Adds a ChannelHandler to the last position of the ChannelPipeline.
     * Intended to be used for adding ChannelHandlers in doOnConnection.
     * <p>
     * For instance, HttpResponse handlers should be added here.
     * @param pipeline - ChannelPipeline
     * @param name - Name of the ChannelHandler
     * @param handler - ChannelHandler
     */
    @Override
    public void addLast(ChannelPipeline pipeline, String name, ChannelHandler handler) {
        if (pipeline.get(name) != null)
            return;

        pipeline.addLast(name, handler);
    }

    @Override
    public NettyServerPipeline<HttpServer> newPipeline() {
        return new ReactorNettyPipeline(this);
    }
}
